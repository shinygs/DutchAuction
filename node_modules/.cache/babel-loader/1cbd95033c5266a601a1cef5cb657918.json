{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents(D)\\\\Computer Science Year 3 Sem 1\\\\CZ4153 Blockchain Technology\\\\Project\\\\DutchAuction\\\\src\\\\AuctionApp.js\";\nimport React from \"react\";\nimport CanvasJSReact from './canvasjs.react';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Form from \"react-bootstrap/Form\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar dps = [{\n  x: 0,\n  y: 10\n}];\nvar xVal = 0;\nvar yVal = 0; //auction page\n\nclass AuctionApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 20 * 60,\n      //20 minutes (duration of a single auction session)\n      bidAmountInput: \"\",\n      previousBiddedAmount: \"0\",\n      remainingTokens: \"0\",\n      userTokens: \"0\"\n    }; // this.updateChart();\n\n    this.updateChart = this.updateChart.bind(this);\n    this.handleBidInputChange = this.handleBidInputChange.bind(this);\n    this.handleBidInputSubmit = this.handleBidInputSubmit.bind(this);\n    this.calcRemainTokens = this.calcRemainTokens.bind(this);\n    this.calcExpectedTokens = this.calcExpectedTokens.bind(this);\n  } //keep track of time left for the dutch auction session\n\n\n  timer() {\n    this.setState({\n      time: this.state.time - 1\n    });\n\n    if (this.state.time < 1) {\n      clearInterval(this.intervalId); //\n    }\n  } //refresh timer and graph every 1 second\n\n\n  componentDidMount() {\n    this.intervalId = setInterval(this.timer.bind(this), 1000);\n    this.chartInterval = setInterval(this.updateChart.bind(this), 1000);\n    this.userExpectedTokenInterval = setInterval(this.calcExpectedTokens.bind(this), 1000);\n    this.calcRemainTokensInterval = setInterval(this.calcRemainTokens.bind(this), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n    clearInterval(this.chartInterval);\n    clearInterval(this.userExpectedTokenInterval);\n    clearInterval(this.calcRemainTokensInterval);\n  } //comment out this method if dw the auto generated dynamic graph\n\n\n  updateXAxis() {\n    xVal++;\n  } //update the current bidding price per token every minute\n\n\n  updateYAxis() {\n    yVal = parseInt(this.props.current_price);\n  } //update graph with the current time and current bidding price\n\n\n  updateChart() {\n    this.props.getPrice();\n\n    if (this.props.current_price == \"\") {\n      return;\n    }\n\n    this.updateXAxis();\n    this.updateYAxis();\n    dps.push({\n      x: xVal,\n      y: yVal\n    }); //add values to the dateset at runtime\n  }\n\n  calcExpectedTokens() {\n    //not sure how to call\n    console.log(\"Price now: \" + this.props.current_price);\n    console.log(\"Bid Amount: \" + this.state.previousBiddedAmount);\n    var temp = parseFloat(this.state.previousBiddedAmount) / parseInt(this.props.current_price);\n    console.log(\"Expected tokens: \" + temp);\n\n    if (parseFloat(temp) <= 10) {\n      this.setState({\n        userTokens: temp\n      });\n    } else {\n      this.setState({\n        userTokens: 10\n      });\n    }\n  }\n\n  calcRemainTokens() {\n    this.props.getMaxNumOfTokens();\n    console.log(\"Max Tokens: \" + this.props.maxTokens);\n    var temp = parseFloat(this.props.maxTokens) - parseFloat(this.state.userTokens);\n    console.log(\"Remaining tokens: \" + temp);\n\n    if (parseFloat(temp)) {\n      this.setState({\n        remainingTokens: temp\n      });\n    }\n  }\n\n  handleBidInputChange(event) {\n    this.setState({\n      bidAmountInput: event.target.value\n    });\n  }\n\n  handleBidInputSubmit(event) {\n    var bool = window.confirm(\"Bid \" + this.state.bidAmountInput + \" ETH ?\");\n    this.setState({\n      previousBiddedAmount: this.state.bidAmountInput\n    });\n\n    if (bool) {\n      this.props.bid(this.state.previousBiddedAmount);\n    }\n\n    event.preventDefault();\n  }\n\n  render() {\n    const minutes = Math.floor(this.state.time / 60);\n    let seconds = this.state.time % 60;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    const options = {\n      title: {\n        text: \"Bidding Price VS Time\"\n      },\n      data: [{\n        type: \"spline\",\n        dataPoints: dps\n      }]\n    };\n    const alignmentStyle = {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    };\n    const bidStyle = {\n      padding: \"10px\",\n      width: \"50%\",\n      marginTop: \"250px\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: alignmentStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, \"Auction Status : \", this.props.currentStage)), (() => {\n      if (document.getElementById(\"count_down\") == null) {\n        console.log(\"this is null\");\n      } else {\n        document.getElementById(\"count_down\").innerHTML = `${minutes} : ${seconds}`;\n      }\n    })(), (() => {\n      if (this.state.time == 0) {\n        document.getElementById(\"end_msg\").innerHTML = \"Auction has ended\";\n      }\n    })(), /*#__PURE__*/React.createElement(\"div\", {\n      style: alignmentStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"end_msg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"count_down\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, \" 20 : 00\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"token_info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"mb-2 bg-white border border-dark rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      variant: \"primary\",\n      class: \"font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, \"This Auction's supply of Gold Tokens:\", ' ', /*#__PURE__*/React.createElement(Badge, {\n      pill: true,\n      variant: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 19\n      }\n    }, this.state.remainingTokens, \" GLD\")), /*#__PURE__*/React.createElement(Alert, {\n      variant: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, \"Current Price Per Token:\", ' ', /*#__PURE__*/React.createElement(Badge, {\n      pill: true,\n      variant: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 19\n      }\n    }, this.props.current_price, \" ETH\")), /*#__PURE__*/React.createElement(Alert, {\n      variant: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }, \"Number of Gold Tokens Left:\", ' ', /*#__PURE__*/React.createElement(Badge, {\n      pill: true,\n      variant: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 19\n      }\n    }, this.state.remainingTokens, \" GLD\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chartContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CanvasJSChart, {\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      style: bidStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"p-3 mb-2 bg-white border border-dark rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, \"Enter amount to Bid in ETH:\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"number\",\n      value: this.state.bidAmountInput,\n      onChange: this.handleBidInputChange,\n      placeholder: \"Enter Amount In ETH\",\n      min: \"0\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Form.Text, {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, \"Change will be provided.\")), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      onClick: this.handleBidInputSubmit,\n      variant: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    }, \"Bid!\")), /*#__PURE__*/React.createElement(Alert, {\n      variant: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, \"Previous bid of \", /*#__PURE__*/React.createElement(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 54\n      }\n    }, this.state.previousBiddedAmount, \" ETH\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 98\n      }\n    }), \"will receive\", \" \", /*#__PURE__*/React.createElement(Badge, {\n      pill: true,\n      variant: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }, this.state.userTokens, \" GLD\")))));\n  }\n\n}\n\nexport default AuctionApp;","map":{"version":3,"sources":["D:/Documents(D)/Computer Science Year 3 Sem 1/CZ4153 Blockchain Technology/Project/DutchAuction/src/AuctionApp.js"],"names":["React","CanvasJSReact","Button","Alert","FormGroup","Badge","Form","CanvasJSChart","dps","x","y","xVal","yVal","AuctionApp","Component","constructor","props","state","time","bidAmountInput","previousBiddedAmount","remainingTokens","userTokens","updateChart","bind","handleBidInputChange","handleBidInputSubmit","calcRemainTokens","calcExpectedTokens","timer","setState","clearInterval","intervalId","componentDidMount","setInterval","chartInterval","userExpectedTokenInterval","calcRemainTokensInterval","componentWillUnmount","updateXAxis","updateYAxis","parseInt","current_price","getPrice","push","console","log","temp","parseFloat","getMaxNumOfTokens","maxTokens","event","target","value","bool","window","confirm","bid","preventDefault","render","minutes","Math","floor","seconds","options","title","text","data","type","dataPoints","alignmentStyle","display","justifyContent","alignItems","bidStyle","padding","width","marginTop","currentStage","document","getElementById","innerHTML","ref","chart"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport CanvasJSReact from './canvasjs.react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport FormGroup from \"react-bootstrap/FormGroup\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\nvar dps = [{ x: 0, y: 10 }]\r\nvar xVal = 0;\r\nvar yVal = 0;\r\n\r\n//auction page\r\nclass AuctionApp extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      time: 20 * 60, //20 minutes (duration of a single auction session)\r\n      bidAmountInput: \"\",\r\n      previousBiddedAmount: \"0\",\r\n      remainingTokens: \"0\",\r\n      userTokens: \"0\"\r\n    }\r\n    // this.updateChart();\r\n    this.updateChart = this.updateChart.bind(this)\r\n    this.handleBidInputChange = this.handleBidInputChange.bind(this);\r\n    this.handleBidInputSubmit = this.handleBidInputSubmit.bind(this);\r\n    this.calcRemainTokens = this.calcRemainTokens.bind(this);\r\n    this.calcExpectedTokens = this.calcExpectedTokens.bind(this);\r\n  }\r\n\r\n  //keep track of time left for the dutch auction session\r\n  timer() {\r\n    this.setState({\r\n      time: this.state.time - 1\r\n    })\r\n    if (this.state.time < 1) {\r\n      clearInterval(this.intervalId); //\r\n    }\r\n  }\r\n\r\n  //refresh timer and graph every 1 second\r\n  componentDidMount() {\r\n    this.intervalId = setInterval(this.timer.bind(this), 1000);\r\n    this.chartInterval = setInterval(this.updateChart.bind(this), 1000);\r\n    this.userExpectedTokenInterval = setInterval(this.calcExpectedTokens.bind(this), 1000);\r\n    this.calcRemainTokensInterval = setInterval(this.calcRemainTokens.bind(this), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalId);\r\n    clearInterval(this.chartInterval);\r\n    clearInterval(this.userExpectedTokenInterval);\r\n    clearInterval(this.calcRemainTokensInterval);\r\n  }\r\n\r\n  //comment out this method if dw the auto generated dynamic graph\r\n  updateXAxis() {\r\n    xVal++;\r\n  }\r\n\r\n  //update the current bidding price per token every minute\r\n  updateYAxis() {\r\n    yVal = parseInt(this.props.current_price);\r\n  }\r\n\r\n  //update graph with the current time and current bidding price\r\n  updateChart() {\r\n    this.props.getPrice();\r\n    if (this.props.current_price == \"\") {\r\n      return;\r\n    }\r\n    this.updateXAxis();\r\n    this.updateYAxis();\r\n    dps.push({ x: xVal, y: yVal }); //add values to the dateset at runtime\r\n  }\r\n\r\n  calcExpectedTokens() { //not sure how to call\r\n    console.log(\"Price now: \" + this.props.current_price);\r\n    console.log(\"Bid Amount: \" + this.state.previousBiddedAmount);\r\n    var temp = parseFloat(this.state.previousBiddedAmount) / parseInt(this.props.current_price);\r\n    console.log(\"Expected tokens: \" + temp);\r\n    if (parseFloat(temp) <= 10) {\r\n      this.setState({ userTokens: temp })\r\n    }\r\n    else {\r\n      this.setState({ userTokens: 10 })\r\n    }\r\n  }\r\n\r\n  calcRemainTokens() {\r\n    this.props.getMaxNumOfTokens();\r\n    console.log(\"Max Tokens: \" + this.props.maxTokens);\r\n    var temp = parseFloat(this.props.maxTokens) - parseFloat(this.state.userTokens);\r\n    console.log(\"Remaining tokens: \" + temp);\r\n    if (parseFloat(temp)) {\r\n      this.setState({ remainingTokens: temp })\r\n    }\r\n  }\r\n\r\n  handleBidInputChange(event) {\r\n    this.setState({ bidAmountInput: event.target.value })\r\n  }\r\n\r\n  handleBidInputSubmit(event) {\r\n    var bool = window.confirm(\"Bid \" + this.state.bidAmountInput + \" ETH ?\");\r\n    this.setState({ previousBiddedAmount: this.state.bidAmountInput })\r\n    if (bool) {\r\n      this.props.bid(this.state.previousBiddedAmount);\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    const minutes = Math.floor(this.state.time / 60)\r\n    let seconds = this.state.time % 60\r\n    seconds = seconds < 10 ? '0' + seconds : seconds;\r\n\r\n    const options = {\r\n      title: {\r\n        text: \"Bidding Price VS Time\"\r\n      },\r\n      data: [{\r\n        type: \"spline\",\r\n        dataPoints: dps\r\n      }]\r\n    }\r\n\r\n    const alignmentStyle = {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\"\r\n    };\r\n\r\n    const bidStyle = {\r\n      padding: \"10px\",\r\n      width: \"50%\",\r\n      marginTop: \"250px\"\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div style={alignmentStyle}>\r\n          <Alert variant=\"info\">Auction Status : {this.props.currentStage}</Alert>\r\n        </div>\r\n        {(() => {\r\n          if (document.getElementById(\"count_down\") == null) {\r\n            console.log(\"this is null\")\r\n          } else {\r\n            document.getElementById(\"count_down\").innerHTML = `${minutes} : ${seconds}`\r\n          }\r\n        })()}\r\n        {(() => {\r\n          if (this.state.time == 0) {\r\n            document.getElementById(\"end_msg\").innerHTML = \"Auction has ended\"\r\n          }\r\n        })()}\r\n        <div style={alignmentStyle}>\r\n          <h1 id=\"end_msg\"></h1>\r\n          <h1 id=\"count_down\"> 20 : 00</h1>\r\n        </div>\r\n        <div>\r\n          <div className=\"token_info\">\r\n            <FormGroup>\r\n              <div class=\"mb-2 bg-white border border-dark rounded\">\r\n                <Alert variant=\"primary\" class=\"font-weight-bold\">This Auction's supply of Gold Tokens:{' '}\r\n                  <Badge pill variant=\"danger\">{this.state.remainingTokens} GLD</Badge>\r\n                </Alert>\r\n                <Alert variant=\"white\">Current Price Per Token:{' '}\r\n                  <Badge pill variant=\"dark\">{this.props.current_price} ETH</Badge>\r\n                </Alert>\r\n                <Alert variant=\"white\">Number of Gold Tokens Left:{' '}\r\n                  <Badge pill variant=\"dark\">{this.state.remainingTokens} GLD</Badge>\r\n                </Alert>\r\n              </div>\r\n            </FormGroup>\r\n          </div>\r\n          <div className='chartContainer'>\r\n            <CanvasJSChart options={options} onRef={ref => this.chart = ref} />\r\n          </div>\r\n        </div>\r\n        <div style={bidStyle}>\r\n          <FormGroup>\r\n            <div class=\"p-3 mb-2 bg-white border border-dark rounded\">\r\n              <div class=\"form-group\">\r\n                <Form.Label>Enter amount to Bid in ETH:</Form.Label>\r\n                <Form.Control type='number' value={this.state.bidAmountInput} onChange={this.handleBidInputChange} placeholder='Enter Amount In ETH' min='0' required></Form.Control>\r\n                <Form.Text className=\"text-muted\">Change will be provided.</Form.Text>\r\n              </div>\r\n              <Button type=\"submit\" onClick={this.handleBidInputSubmit} variant=\"primary\">Bid!</Button>\r\n            </div>\r\n            <Alert variant=\"primary\">Previous bid of <u>{this.state.previousBiddedAmount} ETH</u><br />will receive{\" \"}\r\n              <Badge pill variant=\"success\">{this.state.userTokens} GLD</Badge>\r\n            </Alert>\r\n          </FormGroup>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AuctionApp;"]},"metadata":{},"sourceType":"module"}